package controller

// func (server *Server) Login(c *gin.Context) {
// 	errList = map[string]string{}

// 	body, err := ioutil.ReadAll(c.Request.Body)
// 	if err != nil {
// 		c.JSON(http.StatusUnprocessableEntity, gin.H{
// 			"status":      http.StatusUnprocessableEntity,
// 			"first error": "Unable to get request",
// 		})
// 		return
// 	}
// 	user := models.User{}
// 	err = json.Unmarshal(body, &user)
// 	if err != nil {
// 		c.JSON(http.StatusUnprocessableEntity, gin.H{
// 			"status": http.StatusUnprocessableEntity,
// 			"error":  "Cannot unmarshal body",
// 		})
// 		return
// 	}
// 	user.Prepare()
// 	errorMessages := user.Validate("login")
// 	if len(errorMessages) > 0 {
// 		c.JSON(http.StatusUnprocessableEntity, gin.H{
// 			"status": http.StatusUnprocessableEntity,
// 			"error":  errorMessages,
// 		})
// 		return
// 	}
// 	userData, err := server.SignIn(user.Email, user.Password)
// 	if err != nil {
// 		formattedError := formaterror.FormatError(err.Error())
// 		c.JSON(http.StatusUnprocessableEntity, gin.H{
// 			"status": http.StatusUnprocessableEntity,
// 			"error":  formattedError,
// 		})
// 		return
// 	}
// 	c.JSON(http.StatusOK, gin.H{
// 		"status":   http.StatusOK,
// 		"response": userData,
// 	})
// }

// func (server *Server) SignIn(email, password string) (map[string]interface{}, error) {
// 	var err error

// 	userData := make(map[string]interface{})

// 	user := models.User{}

// 	rows, err = server.DB.Query(`SELECT * FROM users WHERE email=$1`, email)
// }
